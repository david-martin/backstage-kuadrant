---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: examples
spec:
  owner: guests
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example-website
spec:
  type: website
  lifecycle: experimental
  owner: guests
  system: examples
  providesApis: [example-grpc-api]
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example-service
  description: "An example service to demonstrate the entity format in Backstage"
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/path-to-your-docs/
    backstage.io/kubernetes-id: echo
    backstage.io/kubernetes-label-selector: app=echo
    # Optionally, specify the cluster where this service is deployed
    #backstage.io/kubernetes-cluster: kind
    # Optionally, specify the namespace in Kubernetes
    #backstage.io/kubernetes-namespace: default
  labels:
    system: example-system
spec:
  type: service
  lifecycle: experimental
  owner: guests
  system: examples
  providesApis:
    - example-grpc-api
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: example-grpc-api
  annotations:
    backstage.io/techdocs-ref: url:https://github.com/path-to-your-docs/
    backstage.io/kubernetes-id: echo
    backstage.io/kubernetes-label-selector: app=echo
spec:
  type: openapi
  lifecycle: experimental
  owner: guests
  system: examples
  definition: |
    openapi: "3.0.0"
    info:
      title: User Information Service
      version: "1.0"
    paths:
      /users:
        get:
          summary: List all users
          responses:
            '200':
              description: A list of users
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      /users/{id}:
        get:
          summary: Get a user by ID
          parameters:
            - in: path
              name: id
              required: true
              schema:
                type: string
              description: The user ID
          responses:
            '200':
              description: Detailed information about a user
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
            '404':
              description: User not found
    components:
      schemas:
        User:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string

